rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Rules for Certificate Generator project
    match /editors/{editorId} {
      allow read: if request.auth != null && request.auth.uid == editorId;
      allow write: if request.auth != null && 
        get(/databases/$(database)/documents/editors/$(request.auth.uid)).data.role == 'super_admin';
    }
    match /events/{eventId} {
      allow read: if request.auth != null && 
        get(/databases/$(database)/documents/editors/$(request.auth.uid)).data.role in ['editor', 'super_admin'];
      allow write: if request.auth != null && 
        get(/databases/$(database)/documents/editors/$(request.auth.uid)).data.role == 'super_admin';
    }
    match /participants/{participantId} {
      allow read, write: if request.auth != null && 
        get(/databases/$(database)/documents/editors/$(request.auth.uid)).data.role in ['editor', 'super_admin'];
    }

    // Catch-all rule for other collections (temporary access)
    match /{document=**} {
      allow read, write: if request.time < timestamp.date(2026, 3, 19);
    }
  }
}
service firebase.storage {
  match /b/{bucket}/o {
    match /certificates/{allPaths=**} {
      allow read: if true;
      allow write: if request.auth != null;
    }
  }
}